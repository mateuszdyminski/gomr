// Code generated by protoc-gen-go.
// source: mr.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	mr.proto

It has these top-level messages:
	MrStatus
	MrJob
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Status int32

const (
	Status_DONE                       Status = 0
	Status_ALL_DONE                   Status = 1
	Status_PLUGIN_LOADED              Status = 2
	Status_INPUT_LOADED               Status = 3
	Status_INTERMEDIATE_FILES_CREATED Status = 4
	Status_ERROR                      Status = 5
)

var Status_name = map[int32]string{
	0: "DONE",
	1: "ALL_DONE",
	2: "PLUGIN_LOADED",
	3: "INPUT_LOADED",
	4: "INTERMEDIATE_FILES_CREATED",
	5: "ERROR",
}
var Status_value = map[string]int32{
	"DONE":                       0,
	"ALL_DONE":                   1,
	"PLUGIN_LOADED":              2,
	"INPUT_LOADED":               3,
	"INTERMEDIATE_FILES_CREATED": 4,
	"ERROR": 5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Phase int32

const (
	Phase_MAP    Phase = 0
	Phase_REDUCE Phase = 1
)

var Phase_name = map[int32]string{
	0: "MAP",
	1: "REDUCE",
}
var Phase_value = map[string]int32{
	"MAP":    0,
	"REDUCE": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}
func (Phase) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MrStatus struct {
	ServiceId string `protobuf:"bytes,1,opt,name=serviceId" json:"serviceId,omitempty"`
	Status    Status `protobuf:"varint,2,opt,name=status,enum=service.Status" json:"status,omitempty"`
	Phase     Phase  `protobuf:"varint,3,opt,name=phase,enum=service.Phase" json:"phase,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *MrStatus) Reset()                    { *m = MrStatus{} }
func (m *MrStatus) String() string            { return proto.CompactTextString(m) }
func (*MrStatus) ProtoMessage()               {}
func (*MrStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MrJob struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MapTasksNum       int32  `protobuf:"varint,2,opt,name=mapTasksNum" json:"mapTasksNum,omitempty"`
	ReduceTasksNum    int32  `protobuf:"varint,3,opt,name=reduceTasksNum" json:"reduceTasksNum,omitempty"`
	CurrentReduceTask int32  `protobuf:"varint,4,opt,name=currentReduceTask" json:"currentReduceTask,omitempty"`
	Input             string `protobuf:"bytes,5,opt,name=input" json:"input,omitempty"`
	WorkDir           string `protobuf:"bytes,6,opt,name=workDir" json:"workDir,omitempty"`
	MapReducePlugin   []byte `protobuf:"bytes,7,opt,name=mapReducePlugin,proto3" json:"mapReducePlugin,omitempty"`
}

func (m *MrJob) Reset()                    { *m = MrJob{} }
func (m *MrJob) String() string            { return proto.CompactTextString(m) }
func (*MrJob) ProtoMessage()               {}
func (*MrJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*MrStatus)(nil), "service.MrStatus")
	proto.RegisterType((*MrJob)(nil), "service.MrJob")
	proto.RegisterEnum("service.Status", Status_name, Status_value)
	proto.RegisterEnum("service.Phase", Phase_name, Phase_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for MapReduce service

type MapReduceClient interface {
	// Map starts map phase and returns the status of the tasks as long as its ongoing.
	Map(ctx context.Context, in *MrJob, opts ...grpc.CallOption) (MapReduce_MapClient, error)
	// Reduce starts reduce phase and returns the status of the tasks as long as its ongoing.
	Reduce(ctx context.Context, in *MrJob, opts ...grpc.CallOption) (MapReduce_ReduceClient, error)
}

type mapReduceClient struct {
	cc *grpc.ClientConn
}

func NewMapReduceClient(cc *grpc.ClientConn) MapReduceClient {
	return &mapReduceClient{cc}
}

func (c *mapReduceClient) Map(ctx context.Context, in *MrJob, opts ...grpc.CallOption) (MapReduce_MapClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MapReduce_serviceDesc.Streams[0], c.cc, "/service.MapReduce/Map", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapReduceMapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapReduce_MapClient interface {
	Recv() (*MrStatus, error)
	grpc.ClientStream
}

type mapReduceMapClient struct {
	grpc.ClientStream
}

func (x *mapReduceMapClient) Recv() (*MrStatus, error) {
	m := new(MrStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapReduceClient) Reduce(ctx context.Context, in *MrJob, opts ...grpc.CallOption) (MapReduce_ReduceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MapReduce_serviceDesc.Streams[1], c.cc, "/service.MapReduce/Reduce", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapReduceReduceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapReduce_ReduceClient interface {
	Recv() (*MrStatus, error)
	grpc.ClientStream
}

type mapReduceReduceClient struct {
	grpc.ClientStream
}

func (x *mapReduceReduceClient) Recv() (*MrStatus, error) {
	m := new(MrStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MapReduce service

type MapReduceServer interface {
	// Map starts map phase and returns the status of the tasks as long as its ongoing.
	Map(*MrJob, MapReduce_MapServer) error
	// Reduce starts reduce phase and returns the status of the tasks as long as its ongoing.
	Reduce(*MrJob, MapReduce_ReduceServer) error
}

func RegisterMapReduceServer(s *grpc.Server, srv MapReduceServer) {
	s.RegisterService(&_MapReduce_serviceDesc, srv)
}

func _MapReduce_Map_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MrJob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapReduceServer).Map(m, &mapReduceMapServer{stream})
}

type MapReduce_MapServer interface {
	Send(*MrStatus) error
	grpc.ServerStream
}

type mapReduceMapServer struct {
	grpc.ServerStream
}

func (x *mapReduceMapServer) Send(m *MrStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _MapReduce_Reduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MrJob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapReduceServer).Reduce(m, &mapReduceReduceServer{stream})
}

type MapReduce_ReduceServer interface {
	Send(*MrStatus) error
	grpc.ServerStream
}

type mapReduceReduceServer struct {
	grpc.ServerStream
}

func (x *mapReduceReduceServer) Send(m *MrStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _MapReduce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.MapReduce",
	HandlerType: (*MapReduceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Map",
			Handler:       _MapReduce_Map_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Reduce",
			Handler:       _MapReduce_Reduce_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for Master service

type MasterClient interface {
	// Submit submits map reduce job and returns stream of statuses until the job is ongoing.
	Submit(ctx context.Context, in *MrJob, opts ...grpc.CallOption) (Master_SubmitClient, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Submit(ctx context.Context, in *MrJob, opts ...grpc.CallOption) (Master_SubmitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Master_serviceDesc.Streams[0], c.cc, "/service.Master/Submit", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterSubmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Master_SubmitClient interface {
	Recv() (*MrStatus, error)
	grpc.ClientStream
}

type masterSubmitClient struct {
	grpc.ClientStream
}

func (x *masterSubmitClient) Recv() (*MrStatus, error) {
	m := new(MrStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Master service

type MasterServer interface {
	// Submit submits map reduce job and returns stream of statuses until the job is ongoing.
	Submit(*MrJob, Master_SubmitServer) error
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_Submit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MrJob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).Submit(m, &masterSubmitServer{stream})
}

type Master_SubmitServer interface {
	Send(*MrStatus) error
	grpc.ServerStream
}

type masterSubmitServer struct {
	grpc.ServerStream
}

func (x *masterSubmitServer) Send(m *MrStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Master",
	HandlerType: (*MasterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Submit",
			Handler:       _Master_Submit_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6f, 0x9b, 0x40,
	0x10, 0x85, 0xbd, 0xc1, 0x8b, 0xed, 0xa9, 0xeb, 0xe0, 0x51, 0x0f, 0x28, 0x8a, 0x2a, 0xcb, 0xaa,
	0x5a, 0x2b, 0x8a, 0xdc, 0xca, 0x3d, 0xf5, 0x88, 0xc2, 0xb6, 0xa2, 0x02, 0x8c, 0xd6, 0xf8, 0x6c,
	0xad, 0x9d, 0x55, 0x4a, 0x53, 0x0c, 0xda, 0x85, 0xf6, 0x37, 0xf4, 0xc7, 0xf6, 0x3f, 0x54, 0x5e,
	0xb0, 0x13, 0x25, 0x97, 0xdc, 0x66, 0xbe, 0xf7, 0x1e, 0x3c, 0x31, 0x40, 0x3f, 0x57, 0xf3, 0x52,
	0x15, 0x55, 0x81, 0x3d, 0x2d, 0xd5, 0xef, 0x6c, 0x27, 0xa7, 0x7f, 0x09, 0xf4, 0x23, 0xb5, 0xaa,
	0x44, 0x55, 0x6b, 0xbc, 0x84, 0x41, 0xcb, 0x83, 0x5b, 0x97, 0x4c, 0xc8, 0x6c, 0xc0, 0x1f, 0x00,
	0x7e, 0x00, 0x5b, 0x1b, 0x9f, 0x7b, 0x36, 0x21, 0xb3, 0xd1, 0xe2, 0x7c, 0xde, 0x6a, 0xf3, 0x26,
	0xce, 0x5b, 0x19, 0xdf, 0x01, 0x2d, 0x7f, 0x08, 0x2d, 0x5d, 0xcb, 0xf8, 0x46, 0x27, 0x5f, 0x72,
	0xa0, 0xbc, 0x11, 0xd1, 0x01, 0x2b, 0xd7, 0x77, 0x6e, 0xd7, 0xbc, 0xe6, 0x30, 0x4e, 0xff, 0x11,
	0xa0, 0x91, 0xfa, 0x5e, 0x6c, 0x11, 0xa1, 0xbb, 0x17, 0xb9, 0x6c, 0x3b, 0x98, 0x19, 0x27, 0xf0,
	0x2a, 0x17, 0x65, 0x2a, 0xf4, 0xbd, 0x8e, 0xeb, 0xdc, 0x74, 0xa0, 0xfc, 0x31, 0xc2, 0xf7, 0x30,
	0x52, 0xf2, 0xb6, 0xde, 0xc9, 0x93, 0xc9, 0x32, 0xa6, 0x27, 0x14, 0xaf, 0x61, 0xbc, 0xab, 0x95,
	0x92, 0xfb, 0x8a, 0x9f, 0x04, 0xd3, 0x83, 0xf2, 0xe7, 0x02, 0xbe, 0x01, 0x9a, 0xed, 0xcb, 0xba,
	0x72, 0xa9, 0x29, 0xd3, 0x2c, 0xe8, 0x42, 0xef, 0x4f, 0xa1, 0xee, 0xfd, 0x4c, 0xb9, 0xb6, 0xe1,
	0xc7, 0x15, 0x67, 0x70, 0x9e, 0x8b, 0xb2, 0x79, 0x40, 0xf2, 0xab, 0xbe, 0xcb, 0xf6, 0x6e, 0x6f,
	0x42, 0x66, 0x43, 0xfe, 0x14, 0x5f, 0x95, 0x60, 0xb7, 0x1f, 0xbe, 0x0f, 0x5d, 0x7f, 0x19, 0x33,
	0xa7, 0x83, 0x43, 0xe8, 0x7b, 0x61, 0xb8, 0x31, 0x1b, 0xc1, 0x31, 0xbc, 0x4e, 0xc2, 0xf5, 0xb7,
	0x20, 0xde, 0x84, 0x4b, 0xcf, 0x67, 0xbe, 0x73, 0x86, 0x0e, 0x0c, 0x83, 0x38, 0x59, 0xa7, 0x47,
	0x62, 0xe1, 0x5b, 0xb8, 0x08, 0xe2, 0x94, 0xf1, 0x88, 0xf9, 0x81, 0x97, 0xb2, 0xcd, 0xd7, 0x20,
	0x64, 0xab, 0xcd, 0x0d, 0x67, 0x5e, 0xca, 0x7c, 0xa7, 0x8b, 0x03, 0xa0, 0x8c, 0xf3, 0x25, 0x77,
	0xe8, 0xd5, 0x25, 0x50, 0x73, 0x03, 0xec, 0x81, 0x15, 0x79, 0x89, 0xd3, 0x41, 0x00, 0x9b, 0x33,
	0x7f, 0x7d, 0xc3, 0x1c, 0xb2, 0xf8, 0x09, 0x83, 0xe8, 0x58, 0x11, 0xaf, 0xc1, 0x8a, 0x44, 0x89,
	0x0f, 0xc7, 0x33, 0x97, 0xb9, 0x18, 0x3f, 0xda, 0x9b, 0xf2, 0xd3, 0xce, 0x27, 0x82, 0x1f, 0xc1,
	0x6e, 0x73, 0x2f, 0x0b, 0x2c, 0xbe, 0x80, 0x1d, 0x09, 0x5d, 0x49, 0x75, 0x88, 0xae, 0xea, 0x6d,
	0x9e, 0x55, 0x2f, 0x8c, 0x6e, 0x6d, 0xf3, 0x0b, 0x7f, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x89,
	0x66, 0xa7, 0x46, 0xce, 0x02, 0x00, 0x00,
}
